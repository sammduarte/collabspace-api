generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comments {
  id           String   @id @db.Uuid
  post_id      String   @db.Uuid
  user_id      String   @db.Uuid
  content      String   @db.VarChar
  commented_at DateTime @default(now()) @db.Timestamp(6)
  reactions    reactions[]
  posts        posts    @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users        users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model friends {
  id                             String   @id @db.Uuid
  user_id_1                      String   @db.Uuid
  user_id_2                      String   @db.Uuid
  action_id_1                    Int      @default(1) @db.SmallInt
  action_id_2                    Int?     @db.SmallInt
  created_at                     DateTime @default(now()) @db.Timestamp(6)
  users_friends_user_id_1Tousers users    @relation("friends_user_id_1Tousers", fields: [user_id_1], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_friends_user_id_2Tousers users    @relation("friends_user_id_2Tousers", fields: [user_id_2], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model posts {
  id           String     @id @db.Uuid
  user_id      String     @db.Uuid
  content      String     @db.VarChar
  tags         String?    @db.VarChar
  visibility   Int        @default(0) @db.SmallInt
  published_at DateTime   @default(now()) @db.Timestamp(6)
  comments     comments[]
  reactions    reactions[]
  users        users      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model reactions {
  id          String    @id @db.Uuid
  user_id     String    @db.Uuid
  post_id     String?   @db.Uuid
  comment_id  String?   @db.Uuid
  entity_type Int       @db.SmallInt
  reacted_at  DateTime  @default(now()) @db.Timestamp(6)
  users       users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  posts       posts?    @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comments    comments? @relation(fields: [comment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                               String      @id @db.Uuid
  name                             String      @db.VarChar
  email                            String      @unique @db.VarChar
  telephone                        String?     @db.VarChar
  birth_date                       String      @db.VarChar
  password                         String      @db.VarChar
  avatar_url                       String?     @db.VarChar
  active                           Boolean     @default(true)
  created_at                       DateTime    @default(now()) @db.Timestamp(6)
  comments                         comments[]
  friends_friends_user_id_1Tousers friends[]   @relation("friends_user_id_1Tousers")
  friends_friends_user_id_2Tousers friends[]   @relation("friends_user_id_2Tousers")
  posts                            posts[]
  reactions                        reactions[]
}
